// Generated by gencpp from file aruco/Angle.msg
// DO NOT EDIT!


#ifndef ARUCO_MESSAGE_ANGLE_H
#define ARUCO_MESSAGE_ANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aruco
{
template <class ContainerAllocator>
struct Angle_
{
  typedef Angle_<ContainerAllocator> Type;

  Angle_()
    : angle_base(0.0)
    , angle_aruco(0.0)
    , angle_cam(0.0)  {
    }
  Angle_(const ContainerAllocator& _alloc)
    : angle_base(0.0)
    , angle_aruco(0.0)
    , angle_cam(0.0)  {
  (void)_alloc;
    }



   typedef float _angle_base_type;
  _angle_base_type angle_base;

   typedef float _angle_aruco_type;
  _angle_aruco_type angle_aruco;

   typedef float _angle_cam_type;
  _angle_cam_type angle_cam;





  typedef boost::shared_ptr< ::aruco::Angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco::Angle_<ContainerAllocator> const> ConstPtr;

}; // struct Angle_

typedef ::aruco::Angle_<std::allocator<void> > Angle;

typedef boost::shared_ptr< ::aruco::Angle > AnglePtr;
typedef boost::shared_ptr< ::aruco::Angle const> AngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco::Angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco::Angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aruco::Angle_<ContainerAllocator1> & lhs, const ::aruco::Angle_<ContainerAllocator2> & rhs)
{
  return lhs.angle_base == rhs.angle_base &&
    lhs.angle_aruco == rhs.angle_aruco &&
    lhs.angle_cam == rhs.angle_cam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aruco::Angle_<ContainerAllocator1> & lhs, const ::aruco::Angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aruco

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aruco::Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco::Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco::Angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco::Angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco::Angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco::Angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco::Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2b3e9a194f5925c37a312cac19f86be";
  }

  static const char* value(const ::aruco::Angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2b3e9a194f5925cULL;
  static const uint64_t static_value2 = 0x37a312cac19f86beULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco::Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco/Angle";
  }

  static const char* value(const ::aruco::Angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco::Angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32 angle_base\n"
"float32 angle_aruco\n"
"float32 angle_cam\n"
;
  }

  static const char* value(const ::aruco::Angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco::Angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_base);
      stream.next(m.angle_aruco);
      stream.next(m.angle_cam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco::Angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco::Angle_<ContainerAllocator>& v)
  {
    s << indent << "angle_base: ";
    Printer<float>::stream(s, indent + "  ", v.angle_base);
    s << indent << "angle_aruco: ";
    Printer<float>::stream(s, indent + "  ", v.angle_aruco);
    s << indent << "angle_cam: ";
    Printer<float>::stream(s, indent + "  ", v.angle_cam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_MESSAGE_ANGLE_H
